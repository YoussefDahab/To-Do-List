{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","Header","headerStyle","to","linkStyle","textAlign","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","About","Fragment","App","filter","newTodo","Math","floor","random","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e918132.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n\r\n    \r\n    render() {\r\n        //Destructuring allows us to pull variables out of lists. Instead of doing this.props.todo.id now I just say id. Same with title\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style = { this.getStyle() }>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> {/*To make the checkbox do something we add the event OnChange.*/}\r\n                    { title }\r\n                    {/*We add an event to this button so when we click it, the TodoItem is deleted*/}\r\n                    <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 9px',    //5px top and bottom while 10px left and right\r\n    borderRadius: '50%',      // rounded button\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n\r\n\r\n\r\n\r\n/* 1. We can use inline style (using double curly braces {{}}. It is identical to CSS but we do camel case instead of hyphens: backgroundColor not background-color \r\n<div style = {{ backgroundColor: '#f4f4f4'}} ) \r\nin JSX which allows us to have our markup, functionality, and styling all right in our component\r\n\r\n2. we can also use a variable.\r\nconst itemStyle = {\r\n    backgroundColor: '#f4f4f4'\r\n}\r\nthen <div style = { itemStyle }>\r\n\r\n3. style can also be put inside of a function because we want the style to change depending on if the todo has been completed or not\r\n*/\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n  render() {\r\n    return this.props.todos.map((todo) =>(\r\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo} />\r\n      /*todo is passed into TodoItem as a property. When we map through something, a list is created and the list has keys */\r\n    ));\r\n  }\r\n}\r\n\r\n//Property types - are a validation for properties that a component should have. We can set type to required or not\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  markComplete: PropTypes.func.isRequired,\r\n  delTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Todos;\r\n/* we want to load a whole new component called todo item. todo is passed into TodoItem as a property \r\n*/\r\n","// type rfc then hit tab\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link to=\"/\" style={linkStyle} >Home</Link> | <Link to=\"/about\" style={linkStyle} >About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n//export default Header; - no need for this because we have it at the top\r\n//Header is a functional component because it has no state, just markup","// class based component - type rce then hit tab\r\n/*1. When we have an input field, usually you would want to have your fields as a piece of state for that component. \r\n2. As you type in the input field, an onChange event will be fired off and you need to update the state. If I type hello in the input field, then the title in the \r\nstate should be updated to hello. Therefore, the input field has a value of this.state.title and an onChange event*/\r\n\r\nimport React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    // Its going to try to submit to the actual file. We can stop that by e.preventDefault()\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: ''});\r\n    }\r\n    //event handlers take in event parameter e - e.target.value returns whatever we type in the input field\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value })\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display: 'flex'}}>\r\n                {/*e.target.name is title because name=\"title\" */}\r\n                <input type=\"text\" name=\"title\" placeholder=\"Add Todo ...\" value={this.state.title} onChange={this.onChange} style={{ flex: '10', padding: '5px' }} />\r\n                <input type=\"submit\" value=\"Submit\" className=\"btn\"  style={{flex: '1'}} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","// functional component - rcf tab\r\n/*If you don't need a div, you can use a react fragment. Its like a ghost element. It doesn't show in the DOM, however you need it for JSX when returning something.\r\nWe don't want to display the about component on the todo list page. We want it to be a completely different URL*/\r\n\r\nimport React from 'react';\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is a TodoList app. It is part of a REACT crash course</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport About from './components/pages/About';\n//import axios from 'axios';\n//import {v4 as uuid} from 'uuid';\n\n// this file is the main component app. this is a class based component\nclass App extends Component {\n\n  /*to create a react component type rce then hit tab\n  to create a functional component type rfc then hit tab (Header.js)\n  1. Different components can have their own state but alot of times you are going to need a state that multiple components can access. Our todo items need to be \n  in a place where we can feed it down to different components. We will have all of our todos in the main app component state. To access state, we say\n  this.state.todos or this.state.todos[1].title*/\n  /*2. Take the todos in the main app component state and pass them to the Todos component as a property (line 85). The way to add props is just like HTML attributes.\n  Now we can access todos (todo items) from within our Todos component since we passed them to it as a property using this.props.todos or this.props.todos[2].id */\n  /*3. Loop through todos in Todos.js and output title. Use the JS high order array method map. It returns an array from an input array\n  4. Todos has a property called todos. In Todos.js we need to declare that property as a prop type and also import PropTypes\n  5. TodoItems has a property called todo. In TodoItem.js we need to declare that property as a prop type and also import PropTypes\n  6. Header is a functional component because it has no state, just markup\n  7. AddTodo component\n  8. Implement react browser router for about.js  - import it here first\n  9. To use the router, wrap everything in browser router tags which we used in alias of Router. So <Router></Router>\n  10.I want the AddTodo and Todos component to be displayed on the same page while the about component will be displayed on a different page with a path(URL) of /about\n  so we put each of them separately in a Route tag\n  11. If we go to /about page everything in / is also shown. They are all on the same page. The fix for this is to add 'exact' in the first route\n  12. Lets add links to be able to go to both pages. We do that in Header.js. So we have to import the links in Header.js However we don't use the <a> tag for links\n  as in HTML\n  13. google json placeholder : https://jsonplaceholder.typicode.com/ It allows us to have a backend to work with. We will make a request to this URL to get all of \n  the todos instead of having them hardcoded in a list. To make requests, we could use the fetch API (regular JS). We can also use Axios (npm install axios) \n  which is an http library. We want to fetch the todos from the json placeholder API instead of having them hardcoded\n  14. To make an initial request, we use another lifecycle method called componentDidMount() which will run right after the component mounts\n  15. If we add a todo, we want to make a post request (which is used to add something) to the REST API because right now we are just adding into the UI. We want \n  to make the request to the json placeholder and take the response and put it in the todo list. It doesn't get saved to their server but it completes the request. It \n  mimics a real life backend\n  16. Steps 13 to 15 haven't been done yet*/\n\n  state = {\n    todos: [/*\n      {\n        id: 1,\n        title: 'Take out the trash',\n        completed: false\n      },\n      {\n        id: 2,\n        title: 'Dinner with friends',\n        completed: false\n      },\n      {\n        id: 3,\n        title: 'Meeting with boss',\n        completed: false\n      }*/\n    ]\n  }\n\n  /*Step 14. this will give us a promise. It gives us a response. It has a data property called res.data. Make a query of 10 todos - ?_limit=10\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => this.setState({ todos: res.data }))\n  }*/\n\n  // id is passed here as a parameter from TodoItem.js line 22\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo\n    }) });\n  }\n\n  /*Delete Todo - filter method is a high order array method that loops through and based on a condition returns another array. We want to return todos that don't\n  match the id that is passed in because that one will be deleted. Also google ... which is the spread operator. Can't just change the array, make a copy of it*/\n  delTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] });\n  }\n\n  //Step 15. when a todo is first added, its completed is false | short for title: title, since the key = value passed in.\n  // uuid generates random ids for us\n  addTodo = (title) => {\n    const newTodo = {\n      id: Math.floor((Math.random() * 100) + 1),\n      title,\n      completed: false\n    }\n    // copy what we have in the array currently and add in the new todo item the user just typed\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  }\n\n  render() {\n    return ( \n      <Router>\n        <div className=\"App\">\n          <div className=\"Container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                {/* this is JSX but looks like html. In JSX you can't use class. You use className */}\n                {/* Todos.js is imported/embedded into the main app component and todos is passed to Todos as a property */}\n                <Todos todos = {this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n\n/*the single route of index of home will load both components */\n\n//import React from 'react'; then down we would have extends React.Component\n/*function App() {\n  return (            //this is JSX but looks like html. In JSX you can't use class. You use className\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; //for progressive web apps and offline content\n\n/*ReactDOM is rendering (inserting/loading) the App component into the element with the id of root. The app component that is being loaded is actually App.js*/\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}